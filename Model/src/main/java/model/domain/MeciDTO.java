/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package model.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-30")
public class MeciDTO implements org.apache.thrift.TBase<MeciDTO, MeciDTO._Fields>, java.io.Serializable, Cloneable, Comparable<MeciDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeciDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOME_FIELD_DESC = new org.apache.thrift.protocol.TField("home", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AWAY_FIELD_DESC = new org.apache.thrift.protocol.TField("away", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIP_FIELD_DESC = new org.apache.thrift.protocol.TField("tip", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUMAR_BILETE_DISPONIBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("numarBileteDisponibile", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeciDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeciDTOTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String home; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String away; // required
  public long date; // required
  /**
   * 
   * @see TipMeciDTO
   */
  public @org.apache.thrift.annotation.Nullable TipMeciDTO tip; // required
  public int numarBileteDisponibile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    HOME((short)2, "home"),
    AWAY((short)3, "away"),
    DATE((short)4, "date"),
    /**
     * 
     * @see TipMeciDTO
     */
    TIP((short)5, "tip"),
    NUMAR_BILETE_DISPONIBILE((short)6, "numarBileteDisponibile");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // HOME
          return HOME;
        case 3: // AWAY
          return AWAY;
        case 4: // DATE
          return DATE;
        case 5: // TIP
          return TIP;
        case 6: // NUMAR_BILETE_DISPONIBILE
          return NUMAR_BILETE_DISPONIBILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATE_ISSET_ID = 0;
  private static final int __NUMARBILETEDISPONIBILE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME, new org.apache.thrift.meta_data.FieldMetaData("home", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWAY, new org.apache.thrift.meta_data.FieldMetaData("away", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIP, new org.apache.thrift.meta_data.FieldMetaData("tip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TipMeciDTO.class)));
    tmpMap.put(_Fields.NUMAR_BILETE_DISPONIBILE, new org.apache.thrift.meta_data.FieldMetaData("numarBileteDisponibile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeciDTO.class, metaDataMap);
  }

  public MeciDTO() {
  }

  public MeciDTO(
    java.lang.String id,
    java.lang.String home,
    java.lang.String away,
    long date,
    TipMeciDTO tip,
    int numarBileteDisponibile)
  {
    this();
    this.id = id;
    this.home = home;
    this.away = away;
    this.date = date;
    setDateIsSet(true);
    this.tip = tip;
    this.numarBileteDisponibile = numarBileteDisponibile;
    setNumarBileteDisponibileIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeciDTO(MeciDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetHome()) {
      this.home = other.home;
    }
    if (other.isSetAway()) {
      this.away = other.away;
    }
    this.date = other.date;
    if (other.isSetTip()) {
      this.tip = other.tip;
    }
    this.numarBileteDisponibile = other.numarBileteDisponibile;
  }

  public MeciDTO deepCopy() {
    return new MeciDTO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.home = null;
    this.away = null;
    setDateIsSet(false);
    this.date = 0;
    this.tip = null;
    setNumarBileteDisponibileIsSet(false);
    this.numarBileteDisponibile = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public MeciDTO setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHome() {
    return this.home;
  }

  public MeciDTO setHome(@org.apache.thrift.annotation.Nullable java.lang.String home) {
    this.home = home;
    return this;
  }

  public void unsetHome() {
    this.home = null;
  }

  /** Returns true if field home is set (has been assigned a value) and false otherwise */
  public boolean isSetHome() {
    return this.home != null;
  }

  public void setHomeIsSet(boolean value) {
    if (!value) {
      this.home = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAway() {
    return this.away;
  }

  public MeciDTO setAway(@org.apache.thrift.annotation.Nullable java.lang.String away) {
    this.away = away;
    return this;
  }

  public void unsetAway() {
    this.away = null;
  }

  /** Returns true if field away is set (has been assigned a value) and false otherwise */
  public boolean isSetAway() {
    return this.away != null;
  }

  public void setAwayIsSet(boolean value) {
    if (!value) {
      this.away = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public MeciDTO setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  /**
   * 
   * @see TipMeciDTO
   */
  @org.apache.thrift.annotation.Nullable
  public TipMeciDTO getTip() {
    return this.tip;
  }

  /**
   * 
   * @see TipMeciDTO
   */
  public MeciDTO setTip(@org.apache.thrift.annotation.Nullable TipMeciDTO tip) {
    this.tip = tip;
    return this;
  }

  public void unsetTip() {
    this.tip = null;
  }

  /** Returns true if field tip is set (has been assigned a value) and false otherwise */
  public boolean isSetTip() {
    return this.tip != null;
  }

  public void setTipIsSet(boolean value) {
    if (!value) {
      this.tip = null;
    }
  }

  public int getNumarBileteDisponibile() {
    return this.numarBileteDisponibile;
  }

  public MeciDTO setNumarBileteDisponibile(int numarBileteDisponibile) {
    this.numarBileteDisponibile = numarBileteDisponibile;
    setNumarBileteDisponibileIsSet(true);
    return this;
  }

  public void unsetNumarBileteDisponibile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMARBILETEDISPONIBILE_ISSET_ID);
  }

  /** Returns true if field numarBileteDisponibile is set (has been assigned a value) and false otherwise */
  public boolean isSetNumarBileteDisponibile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMARBILETEDISPONIBILE_ISSET_ID);
  }

  public void setNumarBileteDisponibileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMARBILETEDISPONIBILE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case HOME:
      if (value == null) {
        unsetHome();
      } else {
        setHome((java.lang.String)value);
      }
      break;

    case AWAY:
      if (value == null) {
        unsetAway();
      } else {
        setAway((java.lang.String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.Long)value);
      }
      break;

    case TIP:
      if (value == null) {
        unsetTip();
      } else {
        setTip((TipMeciDTO)value);
      }
      break;

    case NUMAR_BILETE_DISPONIBILE:
      if (value == null) {
        unsetNumarBileteDisponibile();
      } else {
        setNumarBileteDisponibile((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case HOME:
      return getHome();

    case AWAY:
      return getAway();

    case DATE:
      return getDate();

    case TIP:
      return getTip();

    case NUMAR_BILETE_DISPONIBILE:
      return getNumarBileteDisponibile();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case HOME:
      return isSetHome();
    case AWAY:
      return isSetAway();
    case DATE:
      return isSetDate();
    case TIP:
      return isSetTip();
    case NUMAR_BILETE_DISPONIBILE:
      return isSetNumarBileteDisponibile();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MeciDTO)
      return this.equals((MeciDTO)that);
    return false;
  }

  public boolean equals(MeciDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_home = true && this.isSetHome();
    boolean that_present_home = true && that.isSetHome();
    if (this_present_home || that_present_home) {
      if (!(this_present_home && that_present_home))
        return false;
      if (!this.home.equals(that.home))
        return false;
    }

    boolean this_present_away = true && this.isSetAway();
    boolean that_present_away = true && that.isSetAway();
    if (this_present_away || that_present_away) {
      if (!(this_present_away && that_present_away))
        return false;
      if (!this.away.equals(that.away))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_tip = true && this.isSetTip();
    boolean that_present_tip = true && that.isSetTip();
    if (this_present_tip || that_present_tip) {
      if (!(this_present_tip && that_present_tip))
        return false;
      if (!this.tip.equals(that.tip))
        return false;
    }

    boolean this_present_numarBileteDisponibile = true;
    boolean that_present_numarBileteDisponibile = true;
    if (this_present_numarBileteDisponibile || that_present_numarBileteDisponibile) {
      if (!(this_present_numarBileteDisponibile && that_present_numarBileteDisponibile))
        return false;
      if (this.numarBileteDisponibile != that.numarBileteDisponibile)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetHome()) ? 131071 : 524287);
    if (isSetHome())
      hashCode = hashCode * 8191 + home.hashCode();

    hashCode = hashCode * 8191 + ((isSetAway()) ? 131071 : 524287);
    if (isSetAway())
      hashCode = hashCode * 8191 + away.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(date);

    hashCode = hashCode * 8191 + ((isSetTip()) ? 131071 : 524287);
    if (isSetTip())
      hashCode = hashCode * 8191 + tip.getValue();

    hashCode = hashCode * 8191 + numarBileteDisponibile;

    return hashCode;
  }

  @Override
  public int compareTo(MeciDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHome()).compareTo(other.isSetHome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.home, other.home);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAway()).compareTo(other.isSetAway());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAway()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.away, other.away);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTip()).compareTo(other.isSetTip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tip, other.tip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumarBileteDisponibile()).compareTo(other.isSetNumarBileteDisponibile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumarBileteDisponibile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numarBileteDisponibile, other.numarBileteDisponibile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeciDTO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("home:");
    if (this.home == null) {
      sb.append("null");
    } else {
      sb.append(this.home);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("away:");
    if (this.away == null) {
      sb.append("null");
    } else {
      sb.append(this.away);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tip:");
    if (this.tip == null) {
      sb.append("null");
    } else {
      sb.append(this.tip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numarBileteDisponibile:");
    sb.append(this.numarBileteDisponibile);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeciDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeciDTOStandardScheme getScheme() {
      return new MeciDTOStandardScheme();
    }
  }

  private static class MeciDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeciDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeciDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.home = iprot.readString();
              struct.setHomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AWAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.away = iprot.readString();
              struct.setAwayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tip = TipMeciDTO.findByValue(iprot.readI32());
              struct.setTipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMAR_BILETE_DISPONIBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numarBileteDisponibile = iprot.readI32();
              struct.setNumarBileteDisponibileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeciDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.home != null) {
        oprot.writeFieldBegin(HOME_FIELD_DESC);
        oprot.writeString(struct.home);
        oprot.writeFieldEnd();
      }
      if (struct.away != null) {
        oprot.writeFieldBegin(AWAY_FIELD_DESC);
        oprot.writeString(struct.away);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      if (struct.tip != null) {
        oprot.writeFieldBegin(TIP_FIELD_DESC);
        oprot.writeI32(struct.tip.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMAR_BILETE_DISPONIBILE_FIELD_DESC);
      oprot.writeI32(struct.numarBileteDisponibile);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeciDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeciDTOTupleScheme getScheme() {
      return new MeciDTOTupleScheme();
    }
  }

  private static class MeciDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeciDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeciDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetHome()) {
        optionals.set(1);
      }
      if (struct.isSetAway()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetTip()) {
        optionals.set(4);
      }
      if (struct.isSetNumarBileteDisponibile()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetHome()) {
        oprot.writeString(struct.home);
      }
      if (struct.isSetAway()) {
        oprot.writeString(struct.away);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetTip()) {
        oprot.writeI32(struct.tip.getValue());
      }
      if (struct.isSetNumarBileteDisponibile()) {
        oprot.writeI32(struct.numarBileteDisponibile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeciDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.home = iprot.readString();
        struct.setHomeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.away = iprot.readString();
        struct.setAwayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tip = TipMeciDTO.findByValue(iprot.readI32());
        struct.setTipIsSet(true);
      }
      if (incoming.get(5)) {
        struct.numarBileteDisponibile = iprot.readI32();
        struct.setNumarBileteDisponibileIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

